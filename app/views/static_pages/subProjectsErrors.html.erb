<% provide(:title, 'Projects Errors') %>
<body>

    <div class="navbar">
      <div class="navbar-inner">
        <ul class="nav">
			<li> <%= link_to "Home", static_pages_home_path %> </li>
			<li> <%= link_to "About", static_pages_help_path %> </li>
			<li class="active"> <%= link_to "Projects", static_pages_exproj_path %> </li>
			<li> <%= link_to "Resume", static_pages_resume_path %> </li>
		    <li> <%= link_to "Fun", static_pages_fun_path %> </li>
	    </ul>
      </div>
    </div>
	<section id="intro">
		<h2><strong>Projects:</strong> Errors</h2>
		<p class="lead"> This is a place for me to vent about mistakes in my code and others. </p>
	</section>
	
	<section id="content">
	    <div class="container-fluid">
            <div class="row-fluid">
                <div class="span2">
                    <ul class="nav nav-list">
                      <li class="nav-header"> <%= link_to "Projects", static_pages_exproj_path %> </li>
                      <li class="active"><a href="#"><i class="icon-book"></i> Errors</a></li>
                    </ul>
                </div>
                <div class="span10">
                    <div class="row-fluid" id="textcontent">
                    <a href="images/apple_3_1_1.png"><img id="textcontent" style="float:left" src="images/apple_3_1_1.png"/></a>
                    <h3>RGBD Dataset</h3>
                    <p> A great Kinect dataset which provides images in full resolution, plus the depth, with masks of the objects. Full rotation at several heights. Unfortunately, there are missing files, only a few objects (although coverage of those is good). And as seen in the above image, the objects sometimes appear in the background of other objects images. Which totally destroys training unless you crop very close to the image, and do not use the background for anything. </p>
                    </div>
                    <div class="row-fluid" id="textcontent">
                    <a href="http://imgs.xkcd.com/comics/update.png"><img id="textcontent" style="float:left" src="http://imgs.xkcd.com/comics/update.png"/></a>
                    <h3>Whoops, my fault</h3>
                    <p> So. When you think to yourself, "Gee, I should use a struct for that. There should only be four ints, and it is important to keep them separate," you should listen. If at any point you find yourself saying "But I could just put them into an array, in the obvious order," ignore yourself. Only do that if you plan on writing the appropriate tests every time you use that array. Check they are ordered correctly. Check there are only ever four. Or write that simple little struct/class that in the long run contains all those checks (and any others you think of later) by default. Because you do not want to find yourself reading 8 crop values, in the wrong order for each of your 110,000 images several days later and think to yourself "I could have prevented this."</p>
                    </div>
                </div>
            </div>
        </div>
	</section>
</body>